"""
Django settings for pokemon project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ

env = environ.Env(
    SECRET_KEY=(str, ""),
    DEBUG=(bool, False),
    ALLOWED_HOST=(str, ""),
    CSRF_TRUSTED_ORIGINS=(str, ""),
    STATIC_ROOT=(str, "staticfiles"),
    DB_NAME=(str, "pokemon-rwa"),
    DB_USER=(str, "postgres"),
    DB_PASSWORD=(str, "postgres"),
    DB_HOST=(str,"localhost"),
    DB_PORT=(int, 5432),
    REDIS_HOST=(str, ""),
    REDIS_PORT=(str, 6379),
    GOOGLE_CLIENT_ID=(str,""),
    USE_TZ = True,
    GOOGLE_CLIENT_SECRET=(str,""),
    FACEBOOK_CLIENT_ID=(str,""),
    FACEBOOK_CLIENT_SECRET=(str,""),
    TWITTER_CLIENT_ID=(str,""),
    TWITTER_CLIENT_SECRET=(str,""),
    APPLE_CLIENT_ID=(str,""),
    APPLE_CLIENT_SECRET=(str,"")
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env("ALLOWED_HOSTS").split(",")
CSRF_TRUSTED_ORIGINS = env("CSRF_TRUSTED_ORIGINS").split(",")


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_crontab',
    'market.apps.MarketConfig',
    'accounts.apps.AccountsConfig',
    'auctions.apps.AuctionsConfig',
    'cards.apps.CardsConfig',
    'casinos.apps.CasinosConfig',
    'logs.apps.LogsConfig',
    'orders.apps.OrdersConfig',
    'referrals.apps.ReferralsConfig',
    'sales.apps.SalesConfig',
    'wallets.apps.WalletsConfig',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.instagram',
    'allauth.socialaccount.providers.twitter_oauth2',
    'allauth.socialaccount.providers.apple',
    'rest_framework',
    'django_components'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'pokemon.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(os.path.dirname(__file__), 'templates')],
        'OPTIONS': {
            'loaders':[(
                'django.template.loaders.cached.Loader', [
                    # Default Django loader
                    'django.template.loaders.filesystem.Loader',
                    # Including this is the same as APP_DIRS=True
                    'django.template.loaders.app_directories.Loader',
                    # Components loader
                    'django_components.template_loader.Loader',
                ]
            )],
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'pokemon.context_processors.global_variables',
                'django.template.context_processors.request'
            ],
        },
    },
]

WSGI_APPLICATION = 'pokemon.wsgi.application'

ASGI_APPLICATION = "pokemon.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(env("REDIS_HOST"), env("REDIS_PORT"))],
        },
    },
}

CRONJOBS = [
    ('*/1 * * * *', 'auctions.tasks.generate_auction_results'),
]

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get('DB_NAME', 'pokemon-rwa'),
        "USER": os.environ.get('DB_USER', 'postgres'),
        "PASSWORD": os.environ.get('DB_PASSWORD', 'root'),
        "HOST": os.environ.get('DB_HOST', '127.0.0.1'),
        "PORT": os.environ.get('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = env("STATIC_ROOT")

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Adding media files

MEDIA_ROOT =  os.path.join(BASE_DIR, 'media')
MEDIA_URL = 'media/'

# Adjust login url
LOGIN_URL = '/auth/login/'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': env("GOOGLE_CLIENT_ID"),
            'secret': env("GOOGLE_CLIENT_SECRET"),
        }
    },
    'twitter_oauth2': {
        'APP': {
            'client_id': env("TWITTER_CLIENT_ID"),
            'secret': env("TWITTER_CLIENT_SECRET"),
        }
    },
    'instagram': {
        'APP': {
            'client_id': env("FACEBOOK_CLIENT_ID"),
            'secret': env("FACEBOOK_CLIENT_SECRET"),
        }
    },
    'apple': {
        'APP': {
            'client_id': env("APPLE_CLIENT_ID"),
            'secret': env("APPLE_CLIENT_SECRET"),
        }
    },
    'facebook': {
        'APP': {
            'client_id': env("FACEBOOK_CLIENT_ID"),
            'secret': env("FACEBOOK_CLIENT_SECRET"),
        },
        'METHOD': 'oauth2',
        'SCOPE': ['public_profile'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'FIELDS': [
            'id',
            'email',
            'name',
            'first_name',
            'last_name',
            'verified',
            'locale',
            'timezone',
            'link',
            'gender',
            'updated_time'
        ],
        'EXCHANGE_TOKEN': True,
        'LOCALE_FUNC': 'path.to.callable',
        'VERIFIED_EMAIL': False,
        'VERSION': 'v13.0',
    }
}

LOGIN_REDIRECT_URL = 'index'
LOGOUT_REDIRECT_URL = '/'

SOCIALACCOUNT_LOGIN_ON_GET = True